{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ElementRef, QueryList } from '@angular/core';\nimport { ButtonControlService } from './button-control.service';\nimport { DICT } from './dictionary';\nimport { DataStatService } from './data-stat.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./button-control.service\";\nimport * as i2 from \"./data-stat.service\";\nimport * as i3 from \"@angular/common\";\nvar _c0 = [\"tryContainer\"];\n\nfunction WordleComponent_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var letter_r4 = ctx.$implicit;\n    var ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"match\", letter_r4.state === ctx_r3.LetterState.FULL_MATCH)(\"partial\", letter_r4.state === ctx_r3.LetterState.PARTIAL_MATCH)(\"wrong\", letter_r4.state === ctx_r3.LetterState.WRONG)(\"has-text\", letter_r4.text !== \"\");\n    i0.ɵɵattribute(\"disabled\", ctx_r3.valid == true ? true : null);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", letter_r4.text, \" \");\n  }\n}\n\nfunction WordleComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6, 7);\n    i0.ɵɵtemplate(2, WordleComponent_div_1_div_2_Template, 2, 10, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var try_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", try_r1.letters);\n  }\n}\n\nvar Tries_number = 6;\nvar word_length = 5;\nvar LetterState = /*#__PURE__*/(function () {\n  (function (LetterState) {\n    LetterState[LetterState[\"WRONG\"] = 0] = \"WRONG\";\n    LetterState[LetterState[\"PARTIAL_MATCH\"] = 1] = \"PARTIAL_MATCH\";\n    LetterState[LetterState[\"FULL_MATCH\"] = 2] = \"FULL_MATCH\";\n    LetterState[LetterState[\"PENDING\"] = 3] = \"PENDING\";\n  })(LetterState || (LetterState = {}));\n\n  return LetterState;\n})();\nexport var WordleComponent = /*#__PURE__*/(function () {\n  var WordleComponent = /*#__PURE__*/function () {\n    function WordleComponent(buttonControlService, dataStatService) {\n      _classCallCheck(this, WordleComponent);\n\n      this.buttonControlService = buttonControlService;\n      this.dataStatService = dataStatService;\n      this.LetterState = LetterState;\n      this.tries = [];\n      this.CurrChar_index = 0;\n      this.tries_done = 0;\n      this.fadeOutMessage = false;\n      this.word_trg = '';\n      this.states = [];\n      this.won = false;\n      this.stats = 0;\n      this.showShareDialogContainer = false;\n      this.showShareDialog = false;\n      this.Msg = '';\n\n      for (var i = 0; i < Tries_number; i++) {\n        var letters = [];\n\n        for (var j = 0; j < word_length; j++) {\n          letters.push({\n            text: '',\n            state: LetterState.PENDING\n          });\n        }\n\n        this.tries.push({\n          letters: letters\n        });\n      }\n\n      var numWords = DICT.length;\n\n      while (true) {\n        var index = Math.floor(Math.random() * numWords);\n        var word = DICT[index];\n\n        if (word.length == word_length) {\n          this.word_trg = word.toLowerCase();\n          console.log(this.word_trg);\n          break;\n        }\n      }\n    }\n\n    _createClass(WordleComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        //localStorage.clear();\n        var myData = this.dataStatService.get('stats');\n        console.log(myData);\n        this.buttonControlService.btn_prsd.subscribe(function (data) {\n          _this.getBtnPrsd = data;\n\n          _this.handleclick(_this.getBtnPrsd);\n        });\n      }\n    }, {\n      key: \"handleKeyboardEvent\",\n      value: function handleKeyboardEvent(event) {\n        this.key = event.key;\n\n        if (this.won) {\n          return;\n        }\n\n        if (this.checkifLetter(event.key) == true) {\n          if (this.CurrChar_index < (this.tries_done + 1) * word_length) {\n            this.setChaR(this.key);\n            this.CurrChar_index++;\n          }\n        }\n      }\n    }, {\n      key: \"handleclick\",\n      value: function handleclick(event) {\n        if (this.won) {\n          return;\n        }\n\n        if (this.checkifLetter(event) == true) {\n          if (this.CurrChar_index < (this.tries_done + 1) * word_length) {\n            this.setChaR(event);\n            this.CurrChar_index++;\n          }\n        }\n      }\n    }, {\n      key: \"checkifLetter\",\n      value: function checkifLetter(event) {\n        if (event.toLowerCase() >= 'a' && event.toLowerCase() <= 'z' && event.length == 1) {\n          return true;\n        }\n\n        if (event == 'Enter' || event == '{enter}' || event == '{ENTER}' || event == 'ENTER') {\n          this.enterHandle();\n        }\n\n        if (event == 'Backspace' || event == \"{bksp}\") {\n          if (this.CurrChar_index <= this.tries_done * word_length + word_length && this.CurrChar_index > this.tries_done * word_length && this.CurrChar_index >= 0 && this.CurrChar_index <= word_length * Tries_number) {\n            this.deleteHandle();\n          }\n        }\n      }\n    }, {\n      key: \"deleteHandle\",\n      value: function deleteHandle() {\n        this.CurrChar_index--;\n        this.setChaR('');\n      }\n    }, {\n      key: \"enterHandle\",\n      value: function enterHandle() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var tryIndex;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (this.checkSubmission() == true) {\n                    //this.animate()\n                    this.tries_done++;\n                    tryIndex = Math.floor(this.CurrChar_index / word_length); //const letterindex = this.CurrChar_index - tryIndex * word_length;\n                  }\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"setChaR\",\n      value: function setChaR(key) {\n        var tryIndex = Math.floor(this.CurrChar_index / word_length);\n        var letterindex = this.CurrChar_index - tryIndex * word_length;\n        this.tries[tryIndex].letters[letterindex].text = key;\n      }\n    }, {\n      key: \"checkSubmission\",\n      value: function checkSubmission() {\n        var curTry = this.tries[this.tries_done];\n        var currWord = curTry.letters.map(function (letter) {\n          return letter.text;\n        }).join('');\n\n        if (curTry.letters.some(function (letter) {\n          return letter.text == '';\n        })) {\n          this.showMessage('Ma sai contare, imbecille?');\n          this.shake();\n          return false;\n        }\n\n        if (!DICT.includes(currWord.toLowerCase())) {\n          this.showMessage('Non è una parola, ignorante!');\n          this.shake();\n          return false;\n        }\n\n        if (this.CurrChar_index % 5 == 0 && this.CurrChar_index <= this.tries_done * word_length + word_length && this.CurrChar_index > this.tries_done * word_length && DICT.includes(currWord.toLowerCase())) {\n          this.setState(curTry);\n        }\n\n        return true;\n      }\n    }, {\n      key: \"perfect_match\",\n      value: function perfect_match() {\n        var this_try = this.tries[this.tries_done];\n        var currWord = this_try.letters.map(function (letter) {\n          return letter.text;\n        }).join(''); //var count = (currWord.match(rgxp) || []).length\n\n        var count = 0;\n        var targetWordCharCount = {};\n\n        var _iterator = _createForOfIteratorHelper(this.word_trg),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var letter = _step.value;\n            var _count = targetWordCharCount[letter];\n\n            if (_count == null) {\n              targetWordCharCount[letter] = 0;\n            }\n\n            targetWordCharCount[letter]++;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        for (var i = 0; i < word_length; i++) {\n          //check if char is in the target word\n          var expected = this.word_trg[i];\n          var curLetter = this_try.letters[i];\n          var got = curLetter.text.toLowerCase();\n          var state = LetterState.WRONG; //check if perfect match\n\n          if (expected === got && targetWordCharCount[got] > 0) {\n            //set state to perfect match\n            targetWordCharCount[expected]--;\n            state = LetterState.FULL_MATCH;\n            this.states[i] = state;\n          } else {\n            this.states[i] = LetterState.WRONG;\n          } // console.log(this.copyTry)\n\n        }\n\n        for (var _i = 0; _i < word_length; _i++) {\n          var _expected = this.word_trg[_i];\n          var _curLetter = this_try.letters[_i];\n\n          var _got = _curLetter.text.toLowerCase();\n\n          var _state = LetterState.WRONG;\n\n          if (this.word_trg.includes(_got) && targetWordCharCount[_got] > 0 && this.states[_i] !== 2) {\n            targetWordCharCount[_got]--;\n            _state = LetterState.PARTIAL_MATCH;\n            this.states[_i] = _state;\n          }\n        }\n      }\n      /*Need this method to set the state for every char, but the state has to be set within the animation loop or it will not be sync*/\n\n    }, {\n      key: \"setState\",\n      value: function setState(tryToSetState) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var tryContainer, letterEles, curTry, currWord, countOcc, i, curLettEle, _i2, curLetterEle;\n\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  tryContainer = this.tryContainers.toArray()[this.tries_done].nativeElement;\n                  letterEles = tryContainer.querySelectorAll('.letter-container');\n                  curTry = this.tries[this.tries_done];\n                  currWord = curTry.letters.map(function (letter) {\n                    return letter.text;\n                  }).join('');\n                  countOcc = 0;\n                  this.perfect_match();\n                  i = 0;\n\n                case 7:\n                  if (!(i < letterEles.length)) {\n                    _context2.next = 20;\n                    break;\n                  }\n\n                  curLettEle = letterEles[i];\n                  curLettEle.classList.add('fold'); //console.log(curLettEle)\n\n                  _context2.next = 12;\n                  return this.wait(250);\n\n                case 12:\n                  tryToSetState.letters[i].state = this.states[i];\n                  this.buttonControlService.setKeyboardButtons(tryToSetState.letters[i].text, this.states[i]);\n                  curLettEle.classList.remove('fold');\n                  _context2.next = 17;\n                  return this.wait(250);\n\n                case 17:\n                  i++;\n                  _context2.next = 7;\n                  break;\n\n                case 20:\n                  if (this.tries_done === Tries_number) {\n                    // Don't hide it.\n                    this.showMessage(this.word_trg.toUpperCase());\n                    this.showShare();\n                  }\n\n                  if (!tryToSetState.letters.every(function (char) {\n                    return char.state === LetterState.FULL_MATCH;\n                  })) {\n                    _context2.next = 36;\n                    break;\n                  }\n\n                  this.showMessage('NICE!');\n                  this.won = true;\n                  this.setStorageStat('y', this.tries_done); // Bounce animation.\n\n                  _i2 = 0;\n\n                case 26:\n                  if (!(_i2 < letterEles.length)) {\n                    _context2.next = 34;\n                    break;\n                  }\n\n                  curLetterEle = letterEles[_i2];\n                  curLetterEle.classList.add('bounce');\n                  _context2.next = 31;\n                  return this.wait(160);\n\n                case 31:\n                  _i2++;\n                  _context2.next = 26;\n                  break;\n\n                case 34:\n                  this.showShare();\n                  return _context2.abrupt(\"return\");\n\n                case 36:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }, {\n      key: \"shake\",\n      value: function shake() {\n        var tryContainer = this.tryContainers.toArray()[this.tries_done].nativeElement;\n        tryContainer.classList.add('shake');\n        setTimeout(function () {\n          tryContainer.classList.remove('shake');\n        }, 500);\n      }\n    }, {\n      key: \"handleClickShare\",\n      value: function handleClickShare() {\n        // 🟩🟨⬜\n        // Copy results into clipboard.\n        var clipboardContent = '';\n\n        for (var i = 0; i < this.tries_done; i++) {\n          for (var j = 0; j < word_length; j++) {\n            var letter = this.tries[i].letters[j];\n\n            switch (letter.state) {\n              case LetterState.FULL_MATCH:\n                clipboardContent += '🟩';\n                break;\n\n              case LetterState.PARTIAL_MATCH:\n                clipboardContent += '🟨';\n                break;\n\n              case LetterState.WRONG:\n                clipboardContent += '⬜';\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          clipboardContent += '\\n';\n        }\n\n        console.log(clipboardContent);\n        window.navigator['clipboard'].writeText(clipboardContent);\n        this.showShareDialogContainer = false;\n        this.showShareDialog = false;\n        this.showMessage('Copied results to clipboard');\n        window.location.reload();\n      }\n    }, {\n      key: \"wait\",\n      value: function wait(ms) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return new Promise(function (resolve) {\n                    setTimeout(function () {\n                      resolve();\n                    }, ms);\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n      }\n    }, {\n      key: \"showMessage\",\n      value: function showMessage(msg) {\n        var _this2 = this;\n\n        this.Msg = msg;\n        setTimeout(function () {\n          _this2.fadeOutMessage = true;\n          setTimeout(function () {\n            _this2.Msg = '';\n            _this2.fadeOutMessage = false;\n          }, 500);\n        }, 2000);\n      }\n    }, {\n      key: \"showShare\",\n      value: function showShare() {\n        var _this3 = this;\n\n        setTimeout(function () {\n          _this3.showShareDialogContainer = true; // Wait a tick till dialog container is displayed.\n\n          setTimeout(function () {\n            // Slide in the share dialog.\n            _this3.showShareDialog = true;\n          });\n        }, 1500);\n      }\n    }, {\n      key: \"setStorageStat\",\n      value: function setStorageStat(win, tries) {\n        if (win === 'y') {\n          if (tries === 1) {\n            var data = this.dataStatService.get('1Try') + 1;\n            this.dataStatService.set('1Try', data);\n          }\n\n          if (tries === 2) {\n            var data = this.dataStatService.get('2Tries') + 1;\n            this.dataStatService.set('2Tries', data);\n          }\n\n          if (tries === 3) {\n            var data = this.dataStatService.get('3Tries') + 1;\n            this.dataStatService.set('3Tries', data);\n          }\n\n          if (tries === 4) {\n            var data = this.dataStatService.get('4Tries') + 1;\n            this.dataStatService.set('4Tries', data);\n          }\n\n          if (tries === 5) {\n            var data = this.dataStatService.get('5Tries') + 1;\n            this.dataStatService.set('5Tries', data);\n          }\n\n          if (tries === 6) {\n            var data = this.dataStatService.get('6Tries') + 1;\n            this.dataStatService.set('6Tries', data);\n          }\n\n          var stat = this.dataStatService.get('Games') + 1;\n          this.dataStatService.set('Games', stat);\n        }\n\n        console.log('Partite: ' + this.dataStatService.get('Games') + ' 1: ' + this.dataStatService.get('1Try') + ' 2: ' + this.dataStatService.get('2Tries') + ' 3: ' + this.dataStatService.get('3Tries') + ' 4: ' + this.dataStatService.get('4Tries') + ' 5: ' + this.dataStatService.get('5Tries') + ' 6: ' + this.dataStatService.get('6Tries'));\n      }\n    }]);\n\n    return WordleComponent;\n  }();\n\n  WordleComponent.ɵfac = function WordleComponent_Factory(t) {\n    return new (t || WordleComponent)(i0.ɵɵdirectiveInject(i1.ButtonControlService), i0.ɵɵdirectiveInject(i2.DataStatService));\n  };\n\n  WordleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WordleComponent,\n    selectors: [[\"word-wordle\"]],\n    viewQuery: function WordleComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tryContainers = _t);\n      }\n    },\n    hostBindings: function WordleComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function WordleComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyboardEvent($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    decls: 8,\n    vars: 10,\n    consts: [[1, \"main\"], [\"class\", \"try-container\", 4, \"ngFor\", \"ngForOf\"], [1, \"msg\"], [1, \"share-dialog-container\"], [1, \"share-dialog\"], [3, \"click\"], [1, \"try-container\"], [\"tryContainer\", \"\"], [\"class\", \"letter-container\", 3, \"match\", \"partial\", \"wrong\", \"has-text\", 4, \"ngFor\", \"ngForOf\"], [1, \"letter-container\"]],\n    template: function WordleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, WordleComponent_div_1_Template, 3, 1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function WordleComponent_Template_button_click_6_listener() {\n          return ctx.handleClickShare();\n        });\n        i0.ɵɵtext(7, \"Restart\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tries);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"show\", ctx.Msg !== \"\")(\"fade-out\", ctx.fadeOutMessage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.Msg, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"show\", ctx.showShareDialogContainer);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"show\", ctx.showShareDialog);\n      }\n    },\n    dependencies: [i3.NgForOf],\n    styles: [\".main[_ngcontent-%COMP%]{flex-grow:1;display:flex;flex-direction:column;align-items:center;justify-content:center}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]{display:flex;margin-bottom:4px;justify-content:center;align-items:center}.main[_ngcontent-%COMP%]   .try-container.shake[_ngcontent-%COMP%]{animation-name:shake;animation-duration:.5s}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container[_ngcontent-%COMP%]{width:64px;height:64px;border:2px solid #ddd;box-sizing:border-box;margin:0 2px;display:flex;align-items:center;justify-content:center;font-size:32px;font-weight:700;text-transform:uppercase;transition:transform .25s}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container.has-text[_ngcontent-%COMP%]{border-color:#888;animation-name:letter-pop;animation-duration:.12s}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container.match[_ngcontent-%COMP%]{background-color:#6aaa64;border-color:#6aaa64;color:#fff}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container.partial[_ngcontent-%COMP%]{background-color:#c9b458;border-color:#c9b458;color:#fff}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container.wrong[_ngcontent-%COMP%]{background-color:#3a3a3c;border-color:#3a3a3c;color:#fff}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container.fold[_ngcontent-%COMP%]{transform:scaleY(0)}.main[_ngcontent-%COMP%]   .try-container[_ngcontent-%COMP%]   .letter-container.bounce[_ngcontent-%COMP%]{animation-name:bounce;animation-duration:1s}.msg[_ngcontent-%COMP%]{position:absolute;top:82px;padding:16px 24px;background-color:#000;color:#fff;border-radius:8px;font-size:16px;font-weight:700;opacity:0}.msg.show[_ngcontent-%COMP%]{opacity:1}.msg.faded-out[_ngcontent-%COMP%]{opacity:0;transition:opacity .5s}.share-dialog-container[_ngcontent-%COMP%]{background-color:#ffffff80;position:absolute;width:100%;min-height:150%;align-items:center;justify-content:center;visibility:hidden;display:flex;z-index:2}.share-dialog-container.show[_ngcontent-%COMP%]{visibility:visible}.share-dialog-container[_ngcontent-%COMP%]   .share-dialog[_ngcontent-%COMP%]{position:absolute;width:300px;height:300px;background-color:#fff;display:flex;align-items:center;justify-content:center;border-radius:8px;box-shadow:0 10px 25px -5px #0003,0 4px 10px -6px #0000001a;opacity:0;transform:translateY(30px);transition:all .3s ease-out}.share-dialog-container[_ngcontent-%COMP%]   .share-dialog[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:#6aaa64;color:#fff;font-weight:700;font-size:18px;padding:12px 24px;border-radius:4px;border:none;cursor:pointer}.share-dialog-container[_ngcontent-%COMP%]   .share-dialog.show[_ngcontent-%COMP%]{opacity:1;transform:translateY(0)}@keyframes letter-pop{0%{transform:scale(1)}50%{transform:scale(1.15)}to{transform:scale(1)}}@keyframes shake{10%,90%{transform:translate(-1px)}20%,90%{transform:translate(2px)}30%,50%,70%{transform:translate(-4px)}40%,60%{transform:translate(4px)}}@keyframes bounce{0%,20%{transform:translateY(0)}40%{transform:translateY(-30px)}50%{transform:translateY(5px)}60%{transform:translateY(-15px)}80%{transform:translateY(2px)}to{transform:translateY(0)}}\"]\n  });\n  return WordleComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}