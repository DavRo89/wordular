{"ast":null,"code":"import _slicedToArray from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/cadav/Desktop/angular_project/wordular/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { PLATFORM_ID, Injectable, Inject } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common'; // This service is based on the `ng2-cookies` package which sadly is not a service and does\n\nvar CookieService = /*#__PURE__*/(function () {\n  var CookieService = /*#__PURE__*/function () {\n    function CookieService(document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n    platformId) {\n      _classCallCheck(this, CookieService);\n\n      this.document = document;\n      this.platformId = platformId;\n      this.documentIsAccessible = isPlatformBrowser(this.platformId);\n    }\n    /**\n     * Get cookie Regular Expression\n     *\n     * @param name Cookie name\n     * @returns property RegExp\n     *\n     * @author: Stepan Suvorov\n     * @since: 1.0.0\n     */\n\n\n    _createClass(CookieService, [{\n      key: \"check\",\n      value:\n      /**\n       * Return `true` if {@link Document} is accessible, otherwise return `false`\n       *\n       * @param name Cookie name\n       * @returns boolean - whether cookie with specified name exists\n       *\n       * @author: Stepan Suvorov\n       * @since: 1.0.0\n       */\n      function check(name) {\n        if (!this.documentIsAccessible) {\n          return false;\n        }\n\n        name = encodeURIComponent(name);\n        var regExp = CookieService.getCookieRegExp(name);\n        return regExp.test(this.document.cookie);\n      }\n      /**\n       * Get cookies by name\n       *\n       * @param name Cookie name\n       * @returns property value\n       *\n       * @author: Stepan Suvorov\n       * @since: 1.0.0\n       */\n\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        if (this.documentIsAccessible && this.check(name)) {\n          name = encodeURIComponent(name);\n          var regExp = CookieService.getCookieRegExp(name);\n          var result = regExp.exec(this.document.cookie);\n          return result[1] ? CookieService.safeDecodeURIComponent(result[1]) : '';\n        } else {\n          return '';\n        }\n      }\n      /**\n       * Get all cookies in JSON format\n       *\n       * @returns all the cookies in json\n       *\n       * @author: Stepan Suvorov\n       * @since: 1.0.0\n       */\n\n    }, {\n      key: \"getAll\",\n      value: function getAll() {\n        if (!this.documentIsAccessible) {\n          return {};\n        }\n\n        var cookies = {};\n        var document = this.document;\n\n        if (document.cookie && document.cookie !== '') {\n          document.cookie.split(';').forEach(function (currentCookie) {\n            var _currentCookie$split = currentCookie.split('='),\n                _currentCookie$split2 = _slicedToArray(_currentCookie$split, 2),\n                cookieName = _currentCookie$split2[0],\n                cookieValue = _currentCookie$split2[1];\n\n            cookies[CookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = CookieService.safeDecodeURIComponent(cookieValue);\n          });\n        }\n\n        return cookies;\n      }\n    }, {\n      key: \"set\",\n      value: function set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n        if (!this.documentIsAccessible) {\n          return;\n        }\n\n        if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n          var optionsBody = {\n            expires: expiresOrOptions,\n            path: path,\n            domain: domain,\n            secure: secure,\n            sameSite: sameSite ? sameSite : 'Lax'\n          };\n          this.set(name, value, optionsBody);\n          return;\n        }\n\n        var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n        var options = expiresOrOptions ? expiresOrOptions : {};\n\n        if (options.expires) {\n          if (typeof options.expires === 'number') {\n            var dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n            cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n          } else {\n            cookieString += 'expires=' + options.expires.toUTCString() + ';';\n          }\n        }\n\n        if (options.path) {\n          cookieString += 'path=' + options.path + ';';\n        }\n\n        if (options.domain) {\n          cookieString += 'domain=' + options.domain + ';';\n        }\n\n        if (options.secure === false && options.sameSite === 'None') {\n          options.secure = true;\n          console.warn(\"[ngx-cookie-service] Cookie \".concat(name, \" was forced with secure flag because sameSite=None.\") + \"More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130\");\n        }\n\n        if (options.secure) {\n          cookieString += 'secure;';\n        }\n\n        if (!options.sameSite) {\n          options.sameSite = 'Lax';\n        }\n\n        cookieString += 'sameSite=' + options.sameSite + ';';\n        this.document.cookie = cookieString;\n      }\n      /**\n       * Delete cookie by name\n       *\n       * @param name   Cookie name\n       * @param path   Cookie path\n       * @param domain Cookie domain\n       * @param secure Cookie secure flag\n       * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\n       *\n       * @author: Stepan Suvorov\n       * @since: 1.0.0\n       */\n\n    }, {\n      key: \"delete\",\n      value: function _delete(name, path, domain, secure) {\n        var sameSite = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Lax';\n\n        if (!this.documentIsAccessible) {\n          return;\n        }\n\n        var expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n        this.set(name, '', {\n          expires: expiresDate,\n          path: path,\n          domain: domain,\n          secure: secure,\n          sameSite: sameSite\n        });\n      }\n      /**\n       * Delete all cookies\n       *\n       * @param path   Cookie path\n       * @param domain Cookie domain\n       * @param secure Is the Cookie secure\n       * @param sameSite Is the cookie same site\n       *\n       * @author: Stepan Suvorov\n       * @since: 1.0.0\n       */\n\n    }, {\n      key: \"deleteAll\",\n      value: function deleteAll(path, domain, secure) {\n        var sameSite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Lax';\n\n        if (!this.documentIsAccessible) {\n          return;\n        }\n\n        var cookies = this.getAll();\n\n        for (var cookieName in cookies) {\n          if (cookies.hasOwnProperty(cookieName)) {\n            this.delete(cookieName, path, domain, secure, sameSite);\n          }\n        }\n      }\n    }], [{\n      key: \"getCookieRegExp\",\n      value: function getCookieRegExp(name) {\n        var escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n      }\n      /**\n       * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n       *\n       * @param encodedURIComponent A value representing an encoded URI component.\n       *\n       * @returns The unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n       *\n       * @author: Stepan Suvorov\n       * @since: 1.0.0\n       */\n\n    }, {\n      key: \"safeDecodeURIComponent\",\n      value: function safeDecodeURIComponent(encodedURIComponent) {\n        try {\n          return decodeURIComponent(encodedURIComponent);\n        } catch (_a) {\n          // probably it is not uri encoded. return as is\n          return encodedURIComponent;\n        }\n      }\n    }]);\n\n    return CookieService;\n  }();\n\n  CookieService.ɵfac = function CookieService_Factory(t) {\n    return new (t || CookieService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  CookieService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CookieService,\n    factory: CookieService.ɵfac,\n    providedIn: 'root'\n  });\n  return CookieService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-cookie-service\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CookieService }; //# sourceMappingURL=ngx-cookie-service.mjs.map","map":null,"metadata":{},"sourceType":"module"}